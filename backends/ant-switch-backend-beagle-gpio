#!/usr/bin/env bash
# The MIT License (MIT)
#	
# ant-switch-backend-beagle-gpio - beagle gpio backend to antenna switch
#
# This is part of KiwiSDR antenna switch extension
#
# Copyright (c) 2017 Kari Karvonen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Safe GPIO pins
#
# Connector P8
#
# P8 pin 11 - GPIO_45 - Antenna 1
# P8 pin 12 - GPIO_44 - Antenna 2
# P8 pin 13 - GPIO_23 - Antenna 3
# P8 pin 14 - GPIO_26 - Antenna 4
# P8 pin 15 - GPIO_47 - Antenna 5
# P8 pin 16 - GPIO_46 - Antenna 6
# P8 pin 17 - GPIO_27 - Antenna 7
# P8 pin 18 - GPIO_65 - Antenna 8
# P8 pin 19 - GPIO_22 - Antenna 9
# P8 pin 26 - GPIO_61 - Antenna 10
#
SAFEGPIOS=(45 44 23 26 47 46 27 65 22 61)
VERSION=0.5

AntSW_ShowBackend() {
        echo "ant-switch-backend-beagle-gpio version $VERSION"
        echo "More info: https://github.com/OH1KK/KiwiSDR-antenna-switch-extension/blob/master/docs/ant-switch-backend-beagle-gpio.txt"
}

AntSW_Initialize() {
	# Make sure only root can run our script
	if [[ $EUID -ne 0 ]]; then
		echo "This script must be run as root" 1>&2
		exit 1
	fi
        for GPIOPIN in "${SAFEGPIOS[@]}"; do
	        VAL=`cat /sys/class/gpio/gpio${GPIOPIN}/direction 2>/dev/null` 
		if [ "x$VAL" != "xout" ]; then
			# Try automatically initialize
			echo $GPIOPIN > /sys/class/gpio/export
	                echo out > /sys/class/gpio/gpio${GPIOPIN}/direction
			
			# Test again
			VAL=`cat /sys/class/gpio/gpio${GPIOPIN}/value 2>/dev/null` 
			if [ "x$VAL" == "x" ]; then
				echo "Error. GPIO pin $GPIOPIN failed to initialize."
				exit 1
			fi
		fi
	done
}

AntSW_GroundAll() {
	for s in 1 2 3 4 5 6 7 8 9 10; do
		AntSW_DeSelectAntenna $s
	done
}

AntSW_SelectAntenna() {
	IDX=$(($1-1))
	ANT=${SAFEGPIOS[$IDX]}
	echo 1 > /sys/class/gpio/gpio${ANT}/value
}

AntSW_DeSelectAntenna() {
    IDX=$(($1-1)) 
    ANT=${SAFEGPIOS[$IDX]}
    echo 0 > /sys/class/gpio/gpio${ANT}/value 
}

AntSW_ToggleAntenna() {
    IDX=$(($1-1))    
	echo "IDX=$IDX"
    ANT=${SAFEGPIOS[$IDX]}
	# Read antenna status
	VAL=`cat /sys/class/gpio/gpio${ANT}/value`
	if [ "x$VAL" == "x0" ]; then
		AntSW_SelectAntenna $1
	else
		AntSW_DeSelectAntenna $1 
	fi
}

AntSW_ShowSelected() {
	# Read antenna status
	selectedantennas=''
	antennafound=0
	antidx=0
	for GPIOPIN in "${SAFEGPIOS[@]}"; do
		antidx=$(($antidx+1))
        VAL=`cat /sys/class/gpio/gpio${GPIOPIN}/value`
		if [ "x$VAL" == "x1" ]; then
			selectedantennas="${selectedantennas}${antidx},"
			antennafound=$(($antennafound+1))
		fi
	done
	if [ "x$selectedantennas" == "x" ]; then
		# All antenna inputs are grounded
		antennafound=1
		selectedantennas="g,"
	fi
	selectedantennas=${selectedantennas::-1}

	echo -n "Selected antennas: "
	echo $selectedantennas
}
